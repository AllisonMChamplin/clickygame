{"version":3,"sources":["components/Footer.js","components/Reset/index.js","components/GameBoard/index.js","components/Jumbotron/index.js","components/GameCard/index.js","App.js","serviceWorker.js","index.js"],"names":["Footer","Reset","state","amIVisible","className","onClick","this","props","gameBoardResetFunction","React","Component","Jumbotron","gameOver","message","resetGame","GameCard","classNames","isDisabled","id","alt","name","src","image","handleClick","styles","header","color","contHeader","width","margin","title","score","border","cOrder","slice","i","length","j","Math","floor","random","GameBoard","scorePoints","points","setState","newScore","highScore","shuffle","isClicked","cardOrder","bind","e","console","log","isClickedArray","cardList","style","map","card","cardsJson","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dfed2ed0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer className=\"py-1 mx-3 text-center\">\r\n            Footer\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\n\r\nclass Reset extends React.Component {\r\n    // Setting the initial state of the Reset component\r\n    state = {\r\n        amIVisible: false\r\n    };\r\n\r\n    // The render method returns the JSX that should be rendered\r\n    render() {\r\n        return (\r\n            <button className='btn' onClick={this.props.gameBoardResetFunction}>Reset Game!</button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Reset;\r\n\r\n{/* <button onClick={props.resetGame} className='btn'>Reset Game!</button> */}\r\n","import React from 'react';\r\nimport \"./style.css\";\r\nimport Jumbotron from \"../Jumbotron/\";\r\nimport GameCard from \"../GameCard/\";\r\nimport cardsJson from \"../../cards.json\";\r\n\r\nconst styles = {\r\n    header: {\r\n        color: \"#fff\"\r\n    },\r\n    contHeader: {\r\n        width: \"95%\",\r\n        margin: \"0 auto\"\r\n    },\r\n    title: {\r\n        margin: \"10px auto\",\r\n        color: \"#fff\"\r\n    },\r\n    score: {\r\n        color: \"#fff\",\r\n        border: \"1px solid #666\"\r\n    }\r\n};\r\n\r\nconst cardOrder = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\r\nlet cOrder = cardOrder.slice(0);\r\nfor (let i = cOrder.length - 1; i > 0; i--) {\r\n    let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\r\n    [cOrder[i], cOrder[j]] = [cOrder[j], cOrder[i]];\r\n}\r\n\r\nclass GameBoard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            cardOrder: cOrder,\r\n            isClicked: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n            gameOver: false,\r\n            score: 0,\r\n            highScore: 0,\r\n            message: \"Click on a dwarf to earn points, but don't click on any more than once!\"\r\n        };\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick(e) {\r\n        if (!this.state.gameOver) {\r\n            console.log(\"hi***\");\r\n            console.log(\"e: \", e);\r\n            let isClickedArray = this.state.isClicked.slice(0);\r\n            let isClicked = isClickedArray[e];\r\n            if (isClicked) {\r\n                this.gameOver();\r\n            } else {\r\n                isClickedArray[e] = 1;\r\n                this.setState({ isClicked: isClickedArray });\r\n                this.scorePoints(1);\r\n            }\r\n        }\r\n    }\r\n\r\n    scorePoints = (points) => {\r\n        // console.log(\"scorePoints: \", points);\r\n        this.setState({ message: \"You guessed correctly and scored a point! Guess again!\" });\r\n        let oldScore = this.state.score;\r\n        let newScore = oldScore + points;\r\n        this.setState({ score: newScore });\r\n        if (this.state.highScore <= newScore) {\r\n            this.setState({ highScore: newScore });\r\n        }\r\n        this.shuffle();\r\n    }\r\n\r\n    shuffle() {\r\n        let cardList = this.state.cardOrder.slice(0);\r\n        for (let i = cardList.length - 1; i > 0; i--) {\r\n            let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\r\n            [cardList[i], cardList[j]] = [cardList[j], cardList[i]];\r\n            this.setState({ cardOrder: cardList });\r\n        }\r\n        return;\r\n    }\r\n\r\n    gameOver = () => {\r\n        this.setState({ gameOver: true, message: \"\" });\r\n        return;\r\n    }\r\n\r\n    resetGame = () => {\r\n        this.setState({ gameOver: false, message: \"Click on a dwarf to earn points, but don't click on any more than once!\", score: 0, isClicked: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] });\r\n        this.shuffle();\r\n    }\r\n\r\n    // shuffleCards() {\r\n    //     let cardList = this.state.cardOrder;\r\n    //     for (let i = cardList.length - 1; i > 0; i--) {\r\n    //         let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\r\n    //         [cardList[i], cardList[j]] = [cardList[j], cardList[i]];\r\n    //         this.setState({ cardOrder: cardList });\r\n    //     }\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <header style={styles.header}>\r\n                    <div className=\"container-fluid\" style={styles.contHeader}>\r\n                        <div className=\"row\">\r\n                            <div className=\"col\"><h1>React Hobbit Clicky Game</h1></div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col\"><Jumbotron message={this.state.message} gameOver={this.state.gameOver}\r\n                                score={this.state.score} resetGame={this.resetGame} /></div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col text-center\"><div>Score: {this.state.score}</div></div>\r\n                            <div className=\"col text-center\"><div>Top Score: {this.state.highScore}</div></div>\r\n                        </div>\r\n                    </div>\r\n                </header>\r\n                <div>\r\n                    {\r\n                        this.state.cardOrder.map(card => (\r\n                            <GameCard\r\n                                id={cardsJson[card].id}\r\n                                key={cardsJson[card].id}\r\n                                name={cardsJson[card].name}\r\n                                image={cardsJson[card].image}\r\n                                scorePoints={this.scorePoints}\r\n                                gameOver={this.gameOver}\r\n                                isDisabled={this.state.gameOver}\r\n                                handleClick={() => this.handleClick(card)}\r\n                            />\r\n                        ))\r\n                    }\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n};\r\n\r\nexport default GameBoard;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport Reset from \"../Reset/\";\r\n\r\nfunction Jumbotron(props) {\r\n    const isGameOver = props.gameOver;\r\n    if (isGameOver) {\r\n        return (\r\n            <p className=\"instructions\">\r\n                {props.message}\r\n                <Reset gameBoardResetFunction={props.resetGame} />\r\n            </p>\r\n        )\r\n    } else {\r\n        return (\r\n            <p className=\"instructions\">\r\n                {props.message}\r\n            </p>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Jumbotron;\r\n\r\n// return (\r\n//     <p className=\"instructions\">\r\n//         {props.message}\r\n//         <Reset />\r\n//     </p>\r\n// );","import React from 'react';\r\nimport \"./style.css\";\r\n\r\nclass GameCard extends React.Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n        // this.state = { isClicked: false };\r\n        // This binding is necessary to make `this` work in the callback\r\n        // this.handleClick = this.handleClick.bind(this);\r\n    // }\r\n\r\n    // handleClick(e) {\r\n    //     e.preventDefault();\r\n    //     if (!this.props.isDisabled) {\r\n    //         console.log(\"The \" + this.props.id + \" image was clicked.\");\r\n    //         // Is it game over upon this click?\r\n    //         if (this.state.isClicked) {\r\n    //             this.props.gameOver();\r\n    //         } else {\r\n    //             this.setState(state => ({\r\n    //                 isClicked: true\r\n    //             }));\r\n    //             this.props.scorePoints(1);\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    render() {\r\n\r\n        let classNames = \"game-image hover14\";\r\n        if (this.props.isDisabled) {\r\n            classNames = \"game-image disable\"\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <div className={classNames} id={this.props.id}>\r\n                    <figure><img alt={this.props.name} src={this.props.image} id={this.props.id} className=\"\" onClick={this.props.handleClick} /></figure>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameCard;","import React, { Component } from \"react\";\nimport './App.css';\nimport Footer from \"./components/Footer\";\n// import Jumbotron from \"./components/Jumbotron/\";\nimport GameBoard from \"./components/GameBoard/\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container-fluid\" id=\"wrapper\">\n        {/* <Jumbotron /> */}\n        <div className=\"text-center clearfix game-board\">\n          <GameBoard />\n        </div>\n        {/* <Footer /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}